#include "quick.h"

void createQuickSort(QuickSort* q) {
    q->pivot = 0;
}

void swapQuick(QuickSort* q, int num1, int num2) {
    int temp = q->items[num1];
    q->items[num1] = q->items[num2];
    q->items[num2] = temp;
}

int partition(QuickSort* q, int low, int high) {
    int pivot = q->items[high];  // Son elemanı pivot olarak seç
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (q->items[j] < pivot) {  // Eğer mevcut eleman pivotdan küçükse
            i++;
            swapQuick(q, i, j);
        }
    }
    swapQuick(q, i + 1, high);
    return (i + 1);
}

void quickSort(QuickSort* q, int low, int high) {
    if (low < high) {
        int pi = partition(q, low, high);

        // Bölmeden önce ve sonra kalan elemanları özyinelemeli olarak sırala
        quickSort(q, low, pi - 1);
        quickSort(q, pi + 1, high);
    }
}

// Örnek kullanım
int main() {
    QuickSort q;
    createQuickSort(&q);
    
    // q.items dizisinin bir tamsayı dizisiyle başlatıldığını ve q.size'nin dizinin boyutu olduğunu varsayıyoruz
    q.items = (int[]) {10, 7, 8, 9, 1, 5};  // Örnek dizi
    int n = sizeof(q.items) / sizeof(q.items[0]);

    quickSort(&q, 0, n - 1);

    for (int i = 0; i < n; i++) {
        printf("%d ", q.items[i]);
    }
    return 0;
}
